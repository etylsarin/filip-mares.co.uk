{"version":3,"file":"component---src-pages-portfolio-neoluxor-on-line-bookstore-mdx-f7aee45c92fde475fa0b.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,sYAAuY,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,qZAAsZ,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,iiBAC3rC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/neoluxor-on-line-bookstore.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"Based on analysis and user testing, prepare a modern web site that will respect the rules of Internet shopping. The number one aim was for it to be user orientated, but it was also important how the information was arranged and being accessible. It was important to find an equilibrium between usage and entertainment, which will make the shopping experience easier and more convenient.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"After three years of functioning we had agreed to redesign the Neoluxor e-shop. From the information we gained from the original pages, we made the navigation easier and also the ability to put the most relevant contact on the main page. There was a big emphasis on the effectiveness of search and the steps needed to order books more easily. With reference to front-end changes, the CMS was upgraded.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"I was the main consultant for the project Neoluxor. I collaborated on the design and was also responsible for all front-end production (HTML/CSS and JavaScript development) of this site with emphasis on schematics and validity of the code. I also had a significant part in the design in the user accomplishments in the contests, which would hopefully increase the amount of returning customers. I also provided advice in the scope of search engine optimization (SEO) and the paid campaign for search engine marketing (SEM) in Google AdWords.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
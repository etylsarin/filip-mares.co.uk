{"version":3,"file":"component---src-pages-portfolio-ministry-of-finance-mdx-91a0d3a5fb67c91cf4e6.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,0bAA2b,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,oZAAqZ,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,4dAA6d,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,ogBAAqgB,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,mYAAoY,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,maAAoa,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,kgBAAmgB,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,kZACtuH,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/ministry-of-finance.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"The goal of the project was to design and develop a modern and user-friendly website for the Ministry of Finance of the Czech Republic. As the lead front-end engineer, the main focus was on improving performance and ensuring accessibility for all users. The website aimed to provide comprehensive information about the ministry's activities, services, and policies, while also serving as a platform for public engagement and transparency.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"To achieve the project's goals, we opted for a clean and intuitive design that prioritized ease of navigation and readability. The website featured a well-structured layout with clear sections and logical organization of content. This design approach allowed users to quickly find the information they needed, whether it was related to tax regulations, budget allocations, or other financial matters.\"), \"\\n\", React.createElement(_components.p, null, \"In terms of performance, we employed various optimization techniques to ensure that the website loaded quickly and efficiently. We implemented a content delivery network (CDN) to minimize latency and reduce the load on the server. Additionally, we optimized image assets and utilized lazy loading to improve page load times. By adopting best practices, we aimed to provide users with a seamless browsing experience, regardless of their device or internet connection speed.\"), \"\\n\", React.createElement(_components.p, null, \"Accessibility was a key consideration throughout the development process. We followed WCAG (Web Content Accessibility Guidelines) standards to ensure that the website was accessible to people with disabilities. This involved implementing proper semantic HTML tags, providing alternative text for images, and incorporating keyboard navigation support. We also conducted extensive user testing to identify and address any accessibility barriers, ensuring that the website was inclusive and usable for all visitors.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"As the lead front-end engineer, I played a crucial role in shaping the technical aspects of the website. I collaborated closely with the design team to transform their visual concepts into responsive and performant web interfaces. I leveraged modern web development technologies such as HTML5, CSS3, and JavaScript to implement the website's front-end functionality and interactions.\"), \"\\n\", React.createElement(_components.p, null, \"To optimize performance, I conducted thorough code reviews and employed techniques like minification and bundling of assets. I prioritized the use of lightweight frameworks and libraries to minimize overhead and improve page load times. Additionally, I utilized browser developer tools and performance profiling techniques to identify and address any bottlenecks in the website's rendering and resource utilization.\"), \"\\n\", React.createElement(_components.p, null, \"For accessibility, I led the implementation of proper semantic HTML markup, ensuring that screen readers and assistive technologies could accurately interpret and convey the website's content. I also worked closely with the quality assurance team to conduct extensive accessibility audits and resolve any issues that were identified. Through meticulous testing and collaboration, we aimed to make the website accessible to users with various disabilities, including visual impairments and mobility limitations.\"), \"\\n\", React.createElement(_components.p, null, \"Throughout the project, I maintained a strong focus on continuous improvement and code optimization. I proactively researched and adopted the latest web development best practices to enhance performance, security, and accessibility. I also collaborated with backend developers and other stakeholders to ensure smooth integration and seamless data exchange between the front-end and backend systems.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
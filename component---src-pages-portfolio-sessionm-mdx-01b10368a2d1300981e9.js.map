{"version":3,"file":"component---src-pages-portfolio-sessionm-mdx-01b10368a2d1300981e9.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,wcAAyc,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,4YAA6Y,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,saAAua,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,sbAAub,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,+YAAgZ,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,6aAA8a,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,sVAAuV,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,+WACl9G,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/sessionm.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"The goal of the SessionM front-end app is to leverage customer data to create superior personalized experiences, ultimately increasing customer loyalty. The app serves as a platform to manage and analyze customer data, allowing businesses to gain valuable insights and deliver targeted marketing campaigns and rewards. By providing a seamless and tailored user experience, the app aims to enhance customer engagement and foster long-term brand loyalty.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"The SessionM front-end app is built using modern web technologies, ensuring a responsive and intuitive interface for users. The app integrates with various data sources, such as customer relationship management (CRM) systems, point-of-sale (POS) systems, and online platforms, to collect and consolidate customer data. This data is then processed and analyzed to generate actionable insights.\"), \"\\n\", React.createElement(_components.p, null, \"The app provides a comprehensive dashboard where businesses can visualize and explore customer data in real-time. Through advanced analytics and segmentation capabilities, businesses can identify trends, preferences, and behaviors to create targeted campaigns. The app also enables personalized rewards programs, allowing businesses to incentivize customers based on their individual preferences and engagement levels.\"), \"\\n\", React.createElement(_components.p, null, \"The front-end of the app is designed to be user-friendly and visually appealing. It offers a seamless navigation experience, intuitive controls, and interactive visualizations. The responsive design ensures a consistent experience across different devices, including desktops, tablets, and mobile phones. The app also integrates with APIs and third-party services to enable seamless data synchronization and enhance its functionality.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"As a front-end engineer and architect owner of the SessionM app, my responsibilities spanned across multiple areas of the project. I played a crucial role in designing the app's architecture, ensuring scalability, maintainability, and performance. Collaborating with cross-functional teams, I defined the front-end development standards and best practices to ensure code quality and consistency.\"), \"\\n\", React.createElement(_components.p, null, \"I actively participated in the development of the user interface, implementing responsive layouts, interactive components, and data visualizations. Leveraging my expertise in modern front-end frameworks, such as React.js, Angular, or Vue.js, I ensured a smooth and performant user experience. I also collaborated closely with UX designers to translate wireframes and mockups into functional and visually appealing interfaces.\"), \"\\n\", React.createElement(_components.p, null, \"Additionally, I took ownership of integrating the front-end with backend APIs and data sources. This involved designing efficient data fetching strategies, implementing data synchronization mechanisms, and handling error scenarios. I also played a significant role in testing and debugging the app, ensuring its reliability and stability.\"), \"\\n\", React.createElement(_components.p, null, \"Throughout the project, I actively communicated with stakeholders, gathering requirements and providing technical guidance. I worked closely with the QA team to address any issues and ensure the app's overall quality. Moreover, I continuously monitored industry trends and emerging technologies to identify opportunities for further improvements and enhancements.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-portfolio-senate-mdx-efd9ea1dc9a0381a8e35.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,ikBAAkkB,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,qcAAsc,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,6bAA8b,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,8bAA+b,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,wUAAyU,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,mYAAoY,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,iVAAkV,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,sSAC7iH,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/senate.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"The primary goal of the Senate of the Parliament of the Czech Republic website project was to create an engaging, user-friendly, and accessible online platform that serves as a comprehensive source of information and communication for the citizens. The website aimed to enhance user experience by providing intuitive navigation, easy access to legislative documents, and fostering transparency in parliamentary activities. The project also placed a strong emphasis on ensuring the website's accessibility to individuals with disabilities, making it inclusive for all users.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"The Senate website was designed as a modern, visually appealing platform that effectively conveys information while maintaining a user-centric approach. The architecture of the website was meticulously planned to accommodate a vast range of functionalities and present complex legislative processes in a clear and understandable manner. The design language was carefully chosen to reflect the dignity and importance of the parliamentary institution.\"), \"\\n\", React.createElement(_components.p, null, \"To achieve a superior user experience, a multi-tiered navigation system was implemented, allowing visitors to easily find the desired information. The website employed responsive design principles to ensure seamless accessibility across various devices, including desktops, tablets, and smartphones. In addition, the website was optimized for efficient performance, ensuring fast loading times and a smooth browsing experience for all users.\"), \"\\n\", React.createElement(_components.p, null, \"To enhance transparency and encourage public participation, the website included interactive features, such as live streaming of Senate sessions, providing citizens with a direct insight into parliamentary proceedings. It also provided comprehensive information about senators, their roles, and responsibilities, as well as a searchable database of legislative documents, making it easier for users to track specific bills and their progress.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"As the lead front-end engineer of the Senate website project, I played a pivotal role in overseeing its development and ensuring the highest standards of user experience and accessibility were met. I collaborated closely with the design team to translate their visual concepts into interactive and responsive web interfaces.\"), \"\\n\", React.createElement(_components.p, null, \"To achieve accessibility goals, I adhered to the Web Content Accessibility Guidelines (WCAG) 2.1, implementing appropriate design patterns and techniques to ensure compatibility with assistive technologies. I conducted extensive testing to guarantee that the website was fully usable and navigable for individuals with visual impairments, hearing impairments, and motor disabilities.\"), \"\\n\", React.createElement(_components.p, null, \"I spearheaded the implementation of the multi-tiered navigation system, focusing on intuitive categorization and seamless transitions between different sections of the website. Through careful attention to detail, I optimized the website's performance, utilizing techniques such as image optimization, code minification, and caching.\"), \"\\n\", React.createElement(_components.p, null, \"Throughout the project, I conducted regular user testing and gathered feedback to refine the user experience further. I collaborated closely with the development team, ensuring adherence to best practices, coding standards, and optimal performance across different web browsers and devices.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
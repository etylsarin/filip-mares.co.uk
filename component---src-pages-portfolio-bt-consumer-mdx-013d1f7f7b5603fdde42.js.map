{"version":3,"file":"component---src-pages-portfolio-bt-consumer-mdx-013d1f7f7b5603fdde42.js","mappings":"qJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,iSAAkS,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,4fAA6f,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,0VAC7rC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/bt-consumer.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"We were asked to redesign and provide ongoing optimisation of BT.com. This covered a wide variety of areas, from the Sales area to self-service, order journeys and blogs/content areas. The goal was to move away from equally targeting several audiences to primarily targeting consumers.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"Agile-based project where objectives were agreed for each iteration. The project covered the whole of BT.com and could vary per iteration depending on the client's requirements. Deliverables could be simple page templates, arrangements for multi variant testing or more complex JavaScript or API integration. At the same time, we were responsible for ensuring that the platform was optimised as much as possible and that the codebase continued to advance in terms of accessibility and industry standards.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"As a part of LBi London I was one of two tech leads. This has involved working closely with clients, colleagues in different disciplines and third parties. Was also responsible for creating flat HTML/CSS/JavaScript templates to be delivered to the client. Aside from that I made input into planning and estimations for timing of deliverables.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-portfolio-monster-mdx-91808134ec51403a82d7.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,ycAA0c,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,saAAua,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,ueAAwe,KAAMG,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,2BAA4B,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,weAAye,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,0aAA2a,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,sVACxxF,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECcA,MAAMW,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://filip-mares.dev/./src/pages/portfolio/monster.mdx","webpack://filip-mares.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Goal of the project\"), \"\\n\", React.createElement(_components.p, null, \"The primary goal of the Monster job search front-end app is to provide a seamless and user-friendly experience for job seekers looking for employment opportunities. The app aims to connect job seekers with relevant job listings, helping them discover and apply for their desired positions. The overarching objective is to simplify the job search process and improve the overall user experience, making it easier for individuals to find their dream jobs.\"), \"\\n\", React.createElement(_components.h2, null, \"Description of the solution\"), \"\\n\", React.createElement(_components.p, null, \"The Monster job search front-end app is designed to cater to the needs of both job seekers and employers. The app features a clean and intuitive user interface, ensuring a smooth and engaging experience for users. Through a combination of advanced search filters, personalized recommendations, and real-time updates, the app delivers highly relevant job listings to users based on their preferences and qualifications.\"), \"\\n\", React.createElement(_components.p, null, \"The app provides comprehensive job details, including company profiles, job descriptions, and application instructions, allowing job seekers to make informed decisions and streamline their application process. Users can save job listings, set up email alerts for new opportunities, and track their applications within the app. Additionally, the app offers a seamless integration with the Monster backend system, ensuring that job listings and user data are synchronized in real-time.\"), \"\\n\", React.createElement(_components.h2, null, \"My work on this project\"), \"\\n\", React.createElement(_components.p, null, \"As the principal front-end engineer of the Monster job search app, I played a key role in shaping the overall architecture and user experience. I collaborated closely with the design and backend teams to translate requirements into scalable and performant front-end solutions. Leveraging my expertise in front-end technologies such as HTML, CSS, and JavaScript, I ensured that the app was optimized for various devices and browsers, providing a consistent experience across platforms.\"), \"\\n\", React.createElement(_components.p, null, \"I led the development of key features, such as the search functionality, personalized recommendations, and saved job listings. I implemented responsive design principles to make the app accessible and user-friendly on both desktop and mobile devices. Performance optimization was a top priority, and I utilized techniques like lazy loading and code splitting to minimize initial load times and improve overall performance.\"), \"\\n\", React.createElement(_components.p, null, \"Throughout the project, I conducted code reviews, mentored junior developers, and actively participated in agile development processes, such as daily stand-ups and sprint planning. I collaborated with the QA team to identify and address bugs and worked closely with the product owners to gather feedback and iterate on the app's features.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}